// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vagrant.proto

package vagrant_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Machine struct {
	Machine              string   `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Machine) Reset()         { *m = Machine{} }
func (m *Machine) String() string { return proto.CompactTextString(m) }
func (*Machine) ProtoMessage()    {}
func (*Machine) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{1}
}
func (m *Machine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Machine.Unmarshal(m, b)
}
func (m *Machine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Machine.Marshal(b, m, deterministic)
}
func (m *Machine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Machine.Merge(m, src)
}
func (m *Machine) XXX_Size() int {
	return xxx_messageInfo_Machine.Size(m)
}
func (m *Machine) XXX_DiscardUnknown() {
	xxx_messageInfo_Machine.DiscardUnknown(m)
}

var xxx_messageInfo_Machine proto.InternalMessageInfo

func (m *Machine) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

type Valid struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Valid) Reset()         { *m = Valid{} }
func (m *Valid) String() string { return proto.CompactTextString(m) }
func (*Valid) ProtoMessage()    {}
func (*Valid) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{2}
}
func (m *Valid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Valid.Unmarshal(m, b)
}
func (m *Valid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Valid.Marshal(b, m, deterministic)
}
func (m *Valid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Valid.Merge(m, src)
}
func (m *Valid) XXX_Size() int {
	return xxx_messageInfo_Valid.Size(m)
}
func (m *Valid) XXX_DiscardUnknown() {
	xxx_messageInfo_Valid.DiscardUnknown(m)
}

var xxx_messageInfo_Valid proto.InternalMessageInfo

func (m *Valid) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type Identifier struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Identifier) Reset()         { *m = Identifier{} }
func (m *Identifier) String() string { return proto.CompactTextString(m) }
func (*Identifier) ProtoMessage()    {}
func (*Identifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{3}
}
func (m *Identifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Identifier.Unmarshal(m, b)
}
func (m *Identifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Identifier.Marshal(b, m, deterministic)
}
func (m *Identifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Identifier.Merge(m, src)
}
func (m *Identifier) XXX_Size() int {
	return xxx_messageInfo_Identifier.Size(m)
}
func (m *Identifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Identifier.DiscardUnknown(m)
}

var xxx_messageInfo_Identifier proto.InternalMessageInfo

func (m *Identifier) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PluginInfo struct {
	Description          string   `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Priority             int64    `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PluginInfo) Reset()         { *m = PluginInfo{} }
func (m *PluginInfo) String() string { return proto.CompactTextString(m) }
func (*PluginInfo) ProtoMessage()    {}
func (*PluginInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{4}
}
func (m *PluginInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginInfo.Unmarshal(m, b)
}
func (m *PluginInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginInfo.Marshal(b, m, deterministic)
}
func (m *PluginInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginInfo.Merge(m, src)
}
func (m *PluginInfo) XXX_Size() int {
	return xxx_messageInfo_PluginInfo.Size(m)
}
func (m *PluginInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PluginInfo proto.InternalMessageInfo

func (m *PluginInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PluginInfo) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type Content struct {
	Target               string   `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{5}
}
func (m *Content) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Content.Unmarshal(m, b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Content.Marshal(b, m, deterministic)
}
func (m *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(m, src)
}
func (m *Content) XXX_Size() int {
	return xxx_messageInfo_Content.Size(m)
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

func (m *Content) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Content) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type WriteResponse struct {
	Length               int32    `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteResponse) Reset()         { *m = WriteResponse{} }
func (m *WriteResponse) String() string { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()    {}
func (*WriteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{6}
}
func (m *WriteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteResponse.Unmarshal(m, b)
}
func (m *WriteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteResponse.Marshal(b, m, deterministic)
}
func (m *WriteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteResponse.Merge(m, src)
}
func (m *WriteResponse) XXX_Size() int {
	return xxx_messageInfo_WriteResponse.Size(m)
}
func (m *WriteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WriteResponse proto.InternalMessageInfo

func (m *WriteResponse) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

type SystemCapability struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Platform             string   `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemCapability) Reset()         { *m = SystemCapability{} }
func (m *SystemCapability) String() string { return proto.CompactTextString(m) }
func (*SystemCapability) ProtoMessage()    {}
func (*SystemCapability) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{7}
}
func (m *SystemCapability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemCapability.Unmarshal(m, b)
}
func (m *SystemCapability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemCapability.Marshal(b, m, deterministic)
}
func (m *SystemCapability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemCapability.Merge(m, src)
}
func (m *SystemCapability) XXX_Size() int {
	return xxx_messageInfo_SystemCapability.Size(m)
}
func (m *SystemCapability) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemCapability.DiscardUnknown(m)
}

var xxx_messageInfo_SystemCapability proto.InternalMessageInfo

func (m *SystemCapability) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SystemCapability) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type ProviderCapability struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Provider             string   `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProviderCapability) Reset()         { *m = ProviderCapability{} }
func (m *ProviderCapability) String() string { return proto.CompactTextString(m) }
func (*ProviderCapability) ProtoMessage()    {}
func (*ProviderCapability) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{8}
}
func (m *ProviderCapability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProviderCapability.Unmarshal(m, b)
}
func (m *ProviderCapability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProviderCapability.Marshal(b, m, deterministic)
}
func (m *ProviderCapability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderCapability.Merge(m, src)
}
func (m *ProviderCapability) XXX_Size() int {
	return xxx_messageInfo_ProviderCapability.Size(m)
}
func (m *ProviderCapability) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderCapability.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderCapability proto.InternalMessageInfo

func (m *ProviderCapability) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProviderCapability) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

type SystemCapabilityList struct {
	Capabilities         []*SystemCapability `protobuf:"bytes,1,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SystemCapabilityList) Reset()         { *m = SystemCapabilityList{} }
func (m *SystemCapabilityList) String() string { return proto.CompactTextString(m) }
func (*SystemCapabilityList) ProtoMessage()    {}
func (*SystemCapabilityList) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{9}
}
func (m *SystemCapabilityList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemCapabilityList.Unmarshal(m, b)
}
func (m *SystemCapabilityList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemCapabilityList.Marshal(b, m, deterministic)
}
func (m *SystemCapabilityList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemCapabilityList.Merge(m, src)
}
func (m *SystemCapabilityList) XXX_Size() int {
	return xxx_messageInfo_SystemCapabilityList.Size(m)
}
func (m *SystemCapabilityList) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemCapabilityList.DiscardUnknown(m)
}

var xxx_messageInfo_SystemCapabilityList proto.InternalMessageInfo

func (m *SystemCapabilityList) GetCapabilities() []*SystemCapability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

type ProviderCapabilityList struct {
	Capabilities         []*ProviderCapability `protobuf:"bytes,1,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ProviderCapabilityList) Reset()         { *m = ProviderCapabilityList{} }
func (m *ProviderCapabilityList) String() string { return proto.CompactTextString(m) }
func (*ProviderCapabilityList) ProtoMessage()    {}
func (*ProviderCapabilityList) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{10}
}
func (m *ProviderCapabilityList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProviderCapabilityList.Unmarshal(m, b)
}
func (m *ProviderCapabilityList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProviderCapabilityList.Marshal(b, m, deterministic)
}
func (m *ProviderCapabilityList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderCapabilityList.Merge(m, src)
}
func (m *ProviderCapabilityList) XXX_Size() int {
	return xxx_messageInfo_ProviderCapabilityList.Size(m)
}
func (m *ProviderCapabilityList) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderCapabilityList.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderCapabilityList proto.InternalMessageInfo

func (m *ProviderCapabilityList) GetCapabilities() []*ProviderCapability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

type GenericResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenericResponse) Reset()         { *m = GenericResponse{} }
func (m *GenericResponse) String() string { return proto.CompactTextString(m) }
func (*GenericResponse) ProtoMessage()    {}
func (*GenericResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{11}
}
func (m *GenericResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericResponse.Unmarshal(m, b)
}
func (m *GenericResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericResponse.Marshal(b, m, deterministic)
}
func (m *GenericResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericResponse.Merge(m, src)
}
func (m *GenericResponse) XXX_Size() int {
	return xxx_messageInfo_GenericResponse.Size(m)
}
func (m *GenericResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenericResponse proto.InternalMessageInfo

func (m *GenericResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type GuestCapabilityRequest struct {
	Capability           *SystemCapability `protobuf:"bytes,1,opt,name=capability,proto3" json:"capability,omitempty"`
	Machine              string            `protobuf:"bytes,2,opt,name=machine,proto3" json:"machine,omitempty"`
	Arguments            string            `protobuf:"bytes,3,opt,name=arguments,proto3" json:"arguments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GuestCapabilityRequest) Reset()         { *m = GuestCapabilityRequest{} }
func (m *GuestCapabilityRequest) String() string { return proto.CompactTextString(m) }
func (*GuestCapabilityRequest) ProtoMessage()    {}
func (*GuestCapabilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{12}
}
func (m *GuestCapabilityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GuestCapabilityRequest.Unmarshal(m, b)
}
func (m *GuestCapabilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GuestCapabilityRequest.Marshal(b, m, deterministic)
}
func (m *GuestCapabilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuestCapabilityRequest.Merge(m, src)
}
func (m *GuestCapabilityRequest) XXX_Size() int {
	return xxx_messageInfo_GuestCapabilityRequest.Size(m)
}
func (m *GuestCapabilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuestCapabilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuestCapabilityRequest proto.InternalMessageInfo

func (m *GuestCapabilityRequest) GetCapability() *SystemCapability {
	if m != nil {
		return m.Capability
	}
	return nil
}

func (m *GuestCapabilityRequest) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

func (m *GuestCapabilityRequest) GetArguments() string {
	if m != nil {
		return m.Arguments
	}
	return ""
}

type HostCapabilityRequest struct {
	Capability           *SystemCapability `protobuf:"bytes,1,opt,name=capability,proto3" json:"capability,omitempty"`
	Environment          string            `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	Arguments            string            `protobuf:"bytes,3,opt,name=arguments,proto3" json:"arguments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HostCapabilityRequest) Reset()         { *m = HostCapabilityRequest{} }
func (m *HostCapabilityRequest) String() string { return proto.CompactTextString(m) }
func (*HostCapabilityRequest) ProtoMessage()    {}
func (*HostCapabilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{13}
}
func (m *HostCapabilityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostCapabilityRequest.Unmarshal(m, b)
}
func (m *HostCapabilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostCapabilityRequest.Marshal(b, m, deterministic)
}
func (m *HostCapabilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostCapabilityRequest.Merge(m, src)
}
func (m *HostCapabilityRequest) XXX_Size() int {
	return xxx_messageInfo_HostCapabilityRequest.Size(m)
}
func (m *HostCapabilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HostCapabilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HostCapabilityRequest proto.InternalMessageInfo

func (m *HostCapabilityRequest) GetCapability() *SystemCapability {
	if m != nil {
		return m.Capability
	}
	return nil
}

func (m *HostCapabilityRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *HostCapabilityRequest) GetArguments() string {
	if m != nil {
		return m.Arguments
	}
	return ""
}

type ProviderCapabilityRequest struct {
	Capability           *ProviderCapability `protobuf:"bytes,1,opt,name=capability,proto3" json:"capability,omitempty"`
	Machine              string              `protobuf:"bytes,2,opt,name=machine,proto3" json:"machine,omitempty"`
	Arguments            string              `protobuf:"bytes,3,opt,name=arguments,proto3" json:"arguments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ProviderCapabilityRequest) Reset()         { *m = ProviderCapabilityRequest{} }
func (m *ProviderCapabilityRequest) String() string { return proto.CompactTextString(m) }
func (*ProviderCapabilityRequest) ProtoMessage()    {}
func (*ProviderCapabilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{14}
}
func (m *ProviderCapabilityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProviderCapabilityRequest.Unmarshal(m, b)
}
func (m *ProviderCapabilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProviderCapabilityRequest.Marshal(b, m, deterministic)
}
func (m *ProviderCapabilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderCapabilityRequest.Merge(m, src)
}
func (m *ProviderCapabilityRequest) XXX_Size() int {
	return xxx_messageInfo_ProviderCapabilityRequest.Size(m)
}
func (m *ProviderCapabilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderCapabilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderCapabilityRequest proto.InternalMessageInfo

func (m *ProviderCapabilityRequest) GetCapability() *ProviderCapability {
	if m != nil {
		return m.Capability
	}
	return nil
}

func (m *ProviderCapabilityRequest) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

func (m *ProviderCapabilityRequest) GetArguments() string {
	if m != nil {
		return m.Arguments
	}
	return ""
}

type Configuration struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Machine              string   `protobuf:"bytes,2,opt,name=machine,proto3" json:"machine,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Configuration) Reset()         { *m = Configuration{} }
func (m *Configuration) String() string { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()    {}
func (*Configuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{15}
}
func (m *Configuration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Configuration.Unmarshal(m, b)
}
func (m *Configuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Configuration.Marshal(b, m, deterministic)
}
func (m *Configuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configuration.Merge(m, src)
}
func (m *Configuration) XXX_Size() int {
	return xxx_messageInfo_Configuration.Size(m)
}
func (m *Configuration) XXX_DiscardUnknown() {
	xxx_messageInfo_Configuration.DiscardUnknown(m)
}

var xxx_messageInfo_Configuration proto.InternalMessageInfo

func (m *Configuration) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Configuration) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

type ListResponse struct {
	Items                []string `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListResponse) Reset()         { *m = ListResponse{} }
func (m *ListResponse) String() string { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()    {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{16}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListResponse.Unmarshal(m, b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return xxx_messageInfo_ListResponse.Size(m)
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetItems() []string {
	if m != nil {
		return m.Items
	}
	return nil
}

type SyncedFolders struct {
	Machine              string   `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
	Folders              string   `protobuf:"bytes,2,opt,name=folders,proto3" json:"folders,omitempty"`
	Options              string   `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncedFolders) Reset()         { *m = SyncedFolders{} }
func (m *SyncedFolders) String() string { return proto.CompactTextString(m) }
func (*SyncedFolders) ProtoMessage()    {}
func (*SyncedFolders) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{17}
}
func (m *SyncedFolders) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncedFolders.Unmarshal(m, b)
}
func (m *SyncedFolders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncedFolders.Marshal(b, m, deterministic)
}
func (m *SyncedFolders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncedFolders.Merge(m, src)
}
func (m *SyncedFolders) XXX_Size() int {
	return xxx_messageInfo_SyncedFolders.Size(m)
}
func (m *SyncedFolders) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncedFolders.DiscardUnknown(m)
}

var xxx_messageInfo_SyncedFolders proto.InternalMessageInfo

func (m *SyncedFolders) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

func (m *SyncedFolders) GetFolders() string {
	if m != nil {
		return m.Folders
	}
	return ""
}

func (m *SyncedFolders) GetOptions() string {
	if m != nil {
		return m.Options
	}
	return ""
}

type GenericAction struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Machine              string   `protobuf:"bytes,2,opt,name=machine,proto3" json:"machine,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenericAction) Reset()         { *m = GenericAction{} }
func (m *GenericAction) String() string { return proto.CompactTextString(m) }
func (*GenericAction) ProtoMessage()    {}
func (*GenericAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{18}
}
func (m *GenericAction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericAction.Unmarshal(m, b)
}
func (m *GenericAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericAction.Marshal(b, m, deterministic)
}
func (m *GenericAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericAction.Merge(m, src)
}
func (m *GenericAction) XXX_Size() int {
	return xxx_messageInfo_GenericAction.Size(m)
}
func (m *GenericAction) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericAction.DiscardUnknown(m)
}

var xxx_messageInfo_GenericAction proto.InternalMessageInfo

func (m *GenericAction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GenericAction) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

type ExecuteAction struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data                 string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Machine              string   `protobuf:"bytes,3,opt,name=machine,proto3" json:"machine,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteAction) Reset()         { *m = ExecuteAction{} }
func (m *ExecuteAction) String() string { return proto.CompactTextString(m) }
func (*ExecuteAction) ProtoMessage()    {}
func (*ExecuteAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{19}
}
func (m *ExecuteAction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteAction.Unmarshal(m, b)
}
func (m *ExecuteAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteAction.Marshal(b, m, deterministic)
}
func (m *ExecuteAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteAction.Merge(m, src)
}
func (m *ExecuteAction) XXX_Size() int {
	return xxx_messageInfo_ExecuteAction.Size(m)
}
func (m *ExecuteAction) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteAction.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteAction proto.InternalMessageInfo

func (m *ExecuteAction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExecuteAction) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *ExecuteAction) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

type MachineSshInfo struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 int64    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	PrivateKeyPath       string   `protobuf:"bytes,3,opt,name=private_key_path,json=privateKeyPath,proto3" json:"private_key_path,omitempty"`
	Username             string   `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MachineSshInfo) Reset()         { *m = MachineSshInfo{} }
func (m *MachineSshInfo) String() string { return proto.CompactTextString(m) }
func (*MachineSshInfo) ProtoMessage()    {}
func (*MachineSshInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{20}
}
func (m *MachineSshInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MachineSshInfo.Unmarshal(m, b)
}
func (m *MachineSshInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MachineSshInfo.Marshal(b, m, deterministic)
}
func (m *MachineSshInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MachineSshInfo.Merge(m, src)
}
func (m *MachineSshInfo) XXX_Size() int {
	return xxx_messageInfo_MachineSshInfo.Size(m)
}
func (m *MachineSshInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MachineSshInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MachineSshInfo proto.InternalMessageInfo

func (m *MachineSshInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *MachineSshInfo) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *MachineSshInfo) GetPrivateKeyPath() string {
	if m != nil {
		return m.PrivateKeyPath
	}
	return ""
}

func (m *MachineSshInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type MachineState struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ShortDescription     string   `protobuf:"bytes,2,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	LongDescription      string   `protobuf:"bytes,3,opt,name=long_description,json=longDescription,proto3" json:"long_description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MachineState) Reset()         { *m = MachineState{} }
func (m *MachineState) String() string { return proto.CompactTextString(m) }
func (*MachineState) ProtoMessage()    {}
func (*MachineState) Descriptor() ([]byte, []int) {
	return fileDescriptor_05d5fddafc02be38, []int{21}
}
func (m *MachineState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MachineState.Unmarshal(m, b)
}
func (m *MachineState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MachineState.Marshal(b, m, deterministic)
}
func (m *MachineState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MachineState.Merge(m, src)
}
func (m *MachineState) XXX_Size() int {
	return xxx_messageInfo_MachineState.Size(m)
}
func (m *MachineState) XXX_DiscardUnknown() {
	xxx_messageInfo_MachineState.DiscardUnknown(m)
}

var xxx_messageInfo_MachineState proto.InternalMessageInfo

func (m *MachineState) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MachineState) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *MachineState) GetLongDescription() string {
	if m != nil {
		return m.LongDescription
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "vagrant.proto.Empty")
	proto.RegisterType((*Machine)(nil), "vagrant.proto.Machine")
	proto.RegisterType((*Valid)(nil), "vagrant.proto.Valid")
	proto.RegisterType((*Identifier)(nil), "vagrant.proto.Identifier")
	proto.RegisterType((*PluginInfo)(nil), "vagrant.proto.PluginInfo")
	proto.RegisterType((*Content)(nil), "vagrant.proto.Content")
	proto.RegisterType((*WriteResponse)(nil), "vagrant.proto.WriteResponse")
	proto.RegisterType((*SystemCapability)(nil), "vagrant.proto.SystemCapability")
	proto.RegisterType((*ProviderCapability)(nil), "vagrant.proto.ProviderCapability")
	proto.RegisterType((*SystemCapabilityList)(nil), "vagrant.proto.SystemCapabilityList")
	proto.RegisterType((*ProviderCapabilityList)(nil), "vagrant.proto.ProviderCapabilityList")
	proto.RegisterType((*GenericResponse)(nil), "vagrant.proto.GenericResponse")
	proto.RegisterType((*GuestCapabilityRequest)(nil), "vagrant.proto.GuestCapabilityRequest")
	proto.RegisterType((*HostCapabilityRequest)(nil), "vagrant.proto.HostCapabilityRequest")
	proto.RegisterType((*ProviderCapabilityRequest)(nil), "vagrant.proto.ProviderCapabilityRequest")
	proto.RegisterType((*Configuration)(nil), "vagrant.proto.Configuration")
	proto.RegisterType((*ListResponse)(nil), "vagrant.proto.ListResponse")
	proto.RegisterType((*SyncedFolders)(nil), "vagrant.proto.SyncedFolders")
	proto.RegisterType((*GenericAction)(nil), "vagrant.proto.GenericAction")
	proto.RegisterType((*ExecuteAction)(nil), "vagrant.proto.ExecuteAction")
	proto.RegisterType((*MachineSshInfo)(nil), "vagrant.proto.MachineSshInfo")
	proto.RegisterType((*MachineState)(nil), "vagrant.proto.MachineState")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IOClient is the client API for IO service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IOClient interface {
	Read(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Content, error)
	Write(ctx context.Context, in *Content, opts ...grpc.CallOption) (*WriteResponse, error)
}

type iOClient struct {
	cc *grpc.ClientConn
}

func NewIOClient(cc *grpc.ClientConn) IOClient {
	return &iOClient{cc}
}

func (c *iOClient) Read(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/vagrant.proto.IO/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOClient) Write(ctx context.Context, in *Content, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.IO/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IOServer is the server API for IO service.
type IOServer interface {
	Read(context.Context, *Identifier) (*Content, error)
	Write(context.Context, *Content) (*WriteResponse, error)
}

func RegisterIOServer(s *grpc.Server, srv IOServer) {
	s.RegisterService(&_IO_serviceDesc, srv)
}

func _IO_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.IO/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOServer).Read(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IO_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Content)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.IO/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOServer).Write(ctx, req.(*Content))
	}
	return interceptor(ctx, in, info, handler)
}

var _IO_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vagrant.proto.IO",
	HandlerType: (*IOServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _IO_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _IO_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vagrant.proto",
}

// GuestCapabilitiesClient is the client API for GuestCapabilities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GuestCapabilitiesClient interface {
	GuestCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemCapabilityList, error)
	GuestCapability(ctx context.Context, in *GuestCapabilityRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	// IO helpers for streaming (copied from Stream service)
	Read(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Content, error)
	Write(ctx context.Context, in *Content, opts ...grpc.CallOption) (*WriteResponse, error)
}

type guestCapabilitiesClient struct {
	cc *grpc.ClientConn
}

func NewGuestCapabilitiesClient(cc *grpc.ClientConn) GuestCapabilitiesClient {
	return &guestCapabilitiesClient{cc}
}

func (c *guestCapabilitiesClient) GuestCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemCapabilityList, error) {
	out := new(SystemCapabilityList)
	err := c.cc.Invoke(ctx, "/vagrant.proto.GuestCapabilities/GuestCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestCapabilitiesClient) GuestCapability(ctx context.Context, in *GuestCapabilityRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.GuestCapabilities/GuestCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestCapabilitiesClient) Read(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/vagrant.proto.GuestCapabilities/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestCapabilitiesClient) Write(ctx context.Context, in *Content, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.GuestCapabilities/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuestCapabilitiesServer is the server API for GuestCapabilities service.
type GuestCapabilitiesServer interface {
	GuestCapabilities(context.Context, *Empty) (*SystemCapabilityList, error)
	GuestCapability(context.Context, *GuestCapabilityRequest) (*GenericResponse, error)
	// IO helpers for streaming (copied from Stream service)
	Read(context.Context, *Identifier) (*Content, error)
	Write(context.Context, *Content) (*WriteResponse, error)
}

func RegisterGuestCapabilitiesServer(s *grpc.Server, srv GuestCapabilitiesServer) {
	s.RegisterService(&_GuestCapabilities_serviceDesc, srv)
}

func _GuestCapabilities_GuestCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestCapabilitiesServer).GuestCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.GuestCapabilities/GuestCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestCapabilitiesServer).GuestCapabilities(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuestCapabilities_GuestCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuestCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestCapabilitiesServer).GuestCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.GuestCapabilities/GuestCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestCapabilitiesServer).GuestCapability(ctx, req.(*GuestCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuestCapabilities_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestCapabilitiesServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.GuestCapabilities/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestCapabilitiesServer).Read(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuestCapabilities_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Content)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestCapabilitiesServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.GuestCapabilities/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestCapabilitiesServer).Write(ctx, req.(*Content))
	}
	return interceptor(ctx, in, info, handler)
}

var _GuestCapabilities_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vagrant.proto.GuestCapabilities",
	HandlerType: (*GuestCapabilitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GuestCapabilities",
			Handler:    _GuestCapabilities_GuestCapabilities_Handler,
		},
		{
			MethodName: "GuestCapability",
			Handler:    _GuestCapabilities_GuestCapability_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _GuestCapabilities_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _GuestCapabilities_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vagrant.proto",
}

// HostCapabilitiesClient is the client API for HostCapabilities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HostCapabilitiesClient interface {
	HostCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemCapabilityList, error)
	HostCapability(ctx context.Context, in *HostCapabilityRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	// IO helpers for streaming (copied from Stream service)
	Read(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Content, error)
	Write(ctx context.Context, in *Content, opts ...grpc.CallOption) (*WriteResponse, error)
}

type hostCapabilitiesClient struct {
	cc *grpc.ClientConn
}

func NewHostCapabilitiesClient(cc *grpc.ClientConn) HostCapabilitiesClient {
	return &hostCapabilitiesClient{cc}
}

func (c *hostCapabilitiesClient) HostCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemCapabilityList, error) {
	out := new(SystemCapabilityList)
	err := c.cc.Invoke(ctx, "/vagrant.proto.HostCapabilities/HostCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostCapabilitiesClient) HostCapability(ctx context.Context, in *HostCapabilityRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.HostCapabilities/HostCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostCapabilitiesClient) Read(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/vagrant.proto.HostCapabilities/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostCapabilitiesClient) Write(ctx context.Context, in *Content, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.HostCapabilities/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostCapabilitiesServer is the server API for HostCapabilities service.
type HostCapabilitiesServer interface {
	HostCapabilities(context.Context, *Empty) (*SystemCapabilityList, error)
	HostCapability(context.Context, *HostCapabilityRequest) (*GenericResponse, error)
	// IO helpers for streaming (copied from Stream service)
	Read(context.Context, *Identifier) (*Content, error)
	Write(context.Context, *Content) (*WriteResponse, error)
}

func RegisterHostCapabilitiesServer(s *grpc.Server, srv HostCapabilitiesServer) {
	s.RegisterService(&_HostCapabilities_serviceDesc, srv)
}

func _HostCapabilities_HostCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCapabilitiesServer).HostCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.HostCapabilities/HostCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCapabilitiesServer).HostCapabilities(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostCapabilities_HostCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCapabilitiesServer).HostCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.HostCapabilities/HostCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCapabilitiesServer).HostCapability(ctx, req.(*HostCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostCapabilities_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCapabilitiesServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.HostCapabilities/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCapabilitiesServer).Read(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostCapabilities_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Content)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCapabilitiesServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.HostCapabilities/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCapabilitiesServer).Write(ctx, req.(*Content))
	}
	return interceptor(ctx, in, info, handler)
}

var _HostCapabilities_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vagrant.proto.HostCapabilities",
	HandlerType: (*HostCapabilitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HostCapabilities",
			Handler:    _HostCapabilities_HostCapabilities_Handler,
		},
		{
			MethodName: "HostCapability",
			Handler:    _HostCapabilities_HostCapability_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _HostCapabilities_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _HostCapabilities_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vagrant.proto",
}

// ProviderCapabilitiesClient is the client API for ProviderCapabilities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProviderCapabilitiesClient interface {
	ProviderCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProviderCapabilityList, error)
	ProviderCapability(ctx context.Context, in *ProviderCapabilityRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	// IO helpers for streaming (copied from Stream service)
	Read(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Content, error)
	Write(ctx context.Context, in *Content, opts ...grpc.CallOption) (*WriteResponse, error)
}

type providerCapabilitiesClient struct {
	cc *grpc.ClientConn
}

func NewProviderCapabilitiesClient(cc *grpc.ClientConn) ProviderCapabilitiesClient {
	return &providerCapabilitiesClient{cc}
}

func (c *providerCapabilitiesClient) ProviderCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProviderCapabilityList, error) {
	out := new(ProviderCapabilityList)
	err := c.cc.Invoke(ctx, "/vagrant.proto.ProviderCapabilities/ProviderCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerCapabilitiesClient) ProviderCapability(ctx context.Context, in *ProviderCapabilityRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.ProviderCapabilities/ProviderCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerCapabilitiesClient) Read(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/vagrant.proto.ProviderCapabilities/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerCapabilitiesClient) Write(ctx context.Context, in *Content, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.ProviderCapabilities/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderCapabilitiesServer is the server API for ProviderCapabilities service.
type ProviderCapabilitiesServer interface {
	ProviderCapabilities(context.Context, *Empty) (*ProviderCapabilityList, error)
	ProviderCapability(context.Context, *ProviderCapabilityRequest) (*GenericResponse, error)
	// IO helpers for streaming (copied from Stream service)
	Read(context.Context, *Identifier) (*Content, error)
	Write(context.Context, *Content) (*WriteResponse, error)
}

func RegisterProviderCapabilitiesServer(s *grpc.Server, srv ProviderCapabilitiesServer) {
	s.RegisterService(&_ProviderCapabilities_serviceDesc, srv)
}

func _ProviderCapabilities_ProviderCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderCapabilitiesServer).ProviderCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.ProviderCapabilities/ProviderCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderCapabilitiesServer).ProviderCapabilities(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderCapabilities_ProviderCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderCapabilitiesServer).ProviderCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.ProviderCapabilities/ProviderCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderCapabilitiesServer).ProviderCapability(ctx, req.(*ProviderCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderCapabilities_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderCapabilitiesServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.ProviderCapabilities/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderCapabilitiesServer).Read(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderCapabilities_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Content)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderCapabilitiesServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.ProviderCapabilities/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderCapabilitiesServer).Write(ctx, req.(*Content))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProviderCapabilities_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vagrant.proto.ProviderCapabilities",
	HandlerType: (*ProviderCapabilitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProviderCapabilities",
			Handler:    _ProviderCapabilities_ProviderCapabilities_Handler,
		},
		{
			MethodName: "ProviderCapability",
			Handler:    _ProviderCapabilities_ProviderCapability_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ProviderCapabilities_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _ProviderCapabilities_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vagrant.proto",
}

// ConfigClient is the client API for Config service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigClient interface {
	ConfigAttributes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListResponse, error)
	ConfigLoad(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Configuration, error)
	ConfigValidate(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*ListResponse, error)
	ConfigFinalize(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Configuration, error)
	// IO helpers for streaming (copied from Stream service)
	Read(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Content, error)
	Write(ctx context.Context, in *Content, opts ...grpc.CallOption) (*WriteResponse, error)
}

type configClient struct {
	cc *grpc.ClientConn
}

func NewConfigClient(cc *grpc.ClientConn) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) ConfigAttributes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Config/ConfigAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ConfigLoad(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Configuration, error) {
	out := new(Configuration)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Config/ConfigLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ConfigValidate(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Config/ConfigValidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ConfigFinalize(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Configuration, error) {
	out := new(Configuration)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Config/ConfigFinalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) Read(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Config/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) Write(ctx context.Context, in *Content, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Config/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServer is the server API for Config service.
type ConfigServer interface {
	ConfigAttributes(context.Context, *Empty) (*ListResponse, error)
	ConfigLoad(context.Context, *Configuration) (*Configuration, error)
	ConfigValidate(context.Context, *Configuration) (*ListResponse, error)
	ConfigFinalize(context.Context, *Configuration) (*Configuration, error)
	// IO helpers for streaming (copied from Stream service)
	Read(context.Context, *Identifier) (*Content, error)
	Write(context.Context, *Content) (*WriteResponse, error)
}

func RegisterConfigServer(s *grpc.Server, srv ConfigServer) {
	s.RegisterService(&_Config_serviceDesc, srv)
}

func _Config_ConfigAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ConfigAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Config/ConfigAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ConfigAttributes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ConfigLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ConfigLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Config/ConfigLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ConfigLoad(ctx, req.(*Configuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ConfigValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ConfigValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Config/ConfigValidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ConfigValidate(ctx, req.(*Configuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ConfigFinalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ConfigFinalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Config/ConfigFinalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ConfigFinalize(ctx, req.(*Configuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Config/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).Read(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Content)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Config/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).Write(ctx, req.(*Content))
	}
	return interceptor(ctx, in, info, handler)
}

var _Config_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vagrant.proto.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigAttributes",
			Handler:    _Config_ConfigAttributes_Handler,
		},
		{
			MethodName: "ConfigLoad",
			Handler:    _Config_ConfigLoad_Handler,
		},
		{
			MethodName: "ConfigValidate",
			Handler:    _Config_ConfigValidate_Handler,
		},
		{
			MethodName: "ConfigFinalize",
			Handler:    _Config_ConfigFinalize_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Config_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Config_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vagrant.proto",
}

// SyncedFolderClient is the client API for SyncedFolder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SyncedFolderClient interface {
	Cleanup(ctx context.Context, in *SyncedFolders, opts ...grpc.CallOption) (*Empty, error)
	Disable(ctx context.Context, in *SyncedFolders, opts ...grpc.CallOption) (*Empty, error)
	Enable(ctx context.Context, in *SyncedFolders, opts ...grpc.CallOption) (*Empty, error)
	Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginInfo, error)
	IsUsable(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*Valid, error)
	Name(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Identifier, error)
	Prepare(ctx context.Context, in *SyncedFolders, opts ...grpc.CallOption) (*Empty, error)
	// IO helpers for streaming (copied from Stream service)
	Read(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Content, error)
	Write(ctx context.Context, in *Content, opts ...grpc.CallOption) (*WriteResponse, error)
	// Guest capabilities helpers (copied from GuestCapabilities service)
	GuestCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemCapabilityList, error)
	GuestCapability(ctx context.Context, in *GuestCapabilityRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	// Host capabilities helpers (copied from GuestCapabilities service)
	HostCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemCapabilityList, error)
	HostCapability(ctx context.Context, in *HostCapabilityRequest, opts ...grpc.CallOption) (*GenericResponse, error)
}

type syncedFolderClient struct {
	cc *grpc.ClientConn
}

func NewSyncedFolderClient(cc *grpc.ClientConn) SyncedFolderClient {
	return &syncedFolderClient{cc}
}

func (c *syncedFolderClient) Cleanup(ctx context.Context, in *SyncedFolders, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/vagrant.proto.SyncedFolder/Cleanup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncedFolderClient) Disable(ctx context.Context, in *SyncedFolders, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/vagrant.proto.SyncedFolder/Disable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncedFolderClient) Enable(ctx context.Context, in *SyncedFolders, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/vagrant.proto.SyncedFolder/Enable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncedFolderClient) Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginInfo, error) {
	out := new(PluginInfo)
	err := c.cc.Invoke(ctx, "/vagrant.proto.SyncedFolder/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncedFolderClient) IsUsable(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*Valid, error) {
	out := new(Valid)
	err := c.cc.Invoke(ctx, "/vagrant.proto.SyncedFolder/IsUsable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncedFolderClient) Name(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Identifier, error) {
	out := new(Identifier)
	err := c.cc.Invoke(ctx, "/vagrant.proto.SyncedFolder/Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncedFolderClient) Prepare(ctx context.Context, in *SyncedFolders, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/vagrant.proto.SyncedFolder/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncedFolderClient) Read(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/vagrant.proto.SyncedFolder/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncedFolderClient) Write(ctx context.Context, in *Content, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.SyncedFolder/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncedFolderClient) GuestCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemCapabilityList, error) {
	out := new(SystemCapabilityList)
	err := c.cc.Invoke(ctx, "/vagrant.proto.SyncedFolder/GuestCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncedFolderClient) GuestCapability(ctx context.Context, in *GuestCapabilityRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.SyncedFolder/GuestCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncedFolderClient) HostCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemCapabilityList, error) {
	out := new(SystemCapabilityList)
	err := c.cc.Invoke(ctx, "/vagrant.proto.SyncedFolder/HostCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncedFolderClient) HostCapability(ctx context.Context, in *HostCapabilityRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.SyncedFolder/HostCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncedFolderServer is the server API for SyncedFolder service.
type SyncedFolderServer interface {
	Cleanup(context.Context, *SyncedFolders) (*Empty, error)
	Disable(context.Context, *SyncedFolders) (*Empty, error)
	Enable(context.Context, *SyncedFolders) (*Empty, error)
	Info(context.Context, *Empty) (*PluginInfo, error)
	IsUsable(context.Context, *Machine) (*Valid, error)
	Name(context.Context, *Empty) (*Identifier, error)
	Prepare(context.Context, *SyncedFolders) (*Empty, error)
	// IO helpers for streaming (copied from Stream service)
	Read(context.Context, *Identifier) (*Content, error)
	Write(context.Context, *Content) (*WriteResponse, error)
	// Guest capabilities helpers (copied from GuestCapabilities service)
	GuestCapabilities(context.Context, *Empty) (*SystemCapabilityList, error)
	GuestCapability(context.Context, *GuestCapabilityRequest) (*GenericResponse, error)
	// Host capabilities helpers (copied from GuestCapabilities service)
	HostCapabilities(context.Context, *Empty) (*SystemCapabilityList, error)
	HostCapability(context.Context, *HostCapabilityRequest) (*GenericResponse, error)
}

func RegisterSyncedFolderServer(s *grpc.Server, srv SyncedFolderServer) {
	s.RegisterService(&_SyncedFolder_serviceDesc, srv)
}

func _SyncedFolder_Cleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncedFolders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncedFolderServer).Cleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.SyncedFolder/Cleanup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncedFolderServer).Cleanup(ctx, req.(*SyncedFolders))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncedFolder_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncedFolders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncedFolderServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.SyncedFolder/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncedFolderServer).Disable(ctx, req.(*SyncedFolders))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncedFolder_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncedFolders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncedFolderServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.SyncedFolder/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncedFolderServer).Enable(ctx, req.(*SyncedFolders))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncedFolder_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncedFolderServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.SyncedFolder/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncedFolderServer).Info(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncedFolder_IsUsable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Machine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncedFolderServer).IsUsable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.SyncedFolder/IsUsable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncedFolderServer).IsUsable(ctx, req.(*Machine))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncedFolder_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncedFolderServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.SyncedFolder/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncedFolderServer).Name(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncedFolder_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncedFolders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncedFolderServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.SyncedFolder/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncedFolderServer).Prepare(ctx, req.(*SyncedFolders))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncedFolder_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncedFolderServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.SyncedFolder/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncedFolderServer).Read(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncedFolder_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Content)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncedFolderServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.SyncedFolder/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncedFolderServer).Write(ctx, req.(*Content))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncedFolder_GuestCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncedFolderServer).GuestCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.SyncedFolder/GuestCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncedFolderServer).GuestCapabilities(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncedFolder_GuestCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuestCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncedFolderServer).GuestCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.SyncedFolder/GuestCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncedFolderServer).GuestCapability(ctx, req.(*GuestCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncedFolder_HostCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncedFolderServer).HostCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.SyncedFolder/HostCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncedFolderServer).HostCapabilities(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncedFolder_HostCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncedFolderServer).HostCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.SyncedFolder/HostCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncedFolderServer).HostCapability(ctx, req.(*HostCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SyncedFolder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vagrant.proto.SyncedFolder",
	HandlerType: (*SyncedFolderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cleanup",
			Handler:    _SyncedFolder_Cleanup_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _SyncedFolder_Disable_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _SyncedFolder_Enable_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _SyncedFolder_Info_Handler,
		},
		{
			MethodName: "IsUsable",
			Handler:    _SyncedFolder_IsUsable_Handler,
		},
		{
			MethodName: "Name",
			Handler:    _SyncedFolder_Name_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _SyncedFolder_Prepare_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _SyncedFolder_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _SyncedFolder_Write_Handler,
		},
		{
			MethodName: "GuestCapabilities",
			Handler:    _SyncedFolder_GuestCapabilities_Handler,
		},
		{
			MethodName: "GuestCapability",
			Handler:    _SyncedFolder_GuestCapability_Handler,
		},
		{
			MethodName: "HostCapabilities",
			Handler:    _SyncedFolder_HostCapabilities_Handler,
		},
		{
			MethodName: "HostCapability",
			Handler:    _SyncedFolder_HostCapability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vagrant.proto",
}

// ProviderClient is the client API for Provider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProviderClient interface {
	Action(ctx context.Context, in *GenericAction, opts ...grpc.CallOption) (*ListResponse, error)
	Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginInfo, error)
	IsInstalled(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*Valid, error)
	IsUsable(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*Valid, error)
	MachineIdChanged(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*Machine, error)
	Name(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Identifier, error)
	RunAction(ctx context.Context, in *ExecuteAction, opts ...grpc.CallOption) (*GenericResponse, error)
	SshInfo(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*MachineSshInfo, error)
	State(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*MachineState, error)
	// IO helpers for streaming (copied from Stream service)
	Read(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Content, error)
	Write(ctx context.Context, in *Content, opts ...grpc.CallOption) (*WriteResponse, error)
	// Config helpers (copied from Config service)
	ConfigAttributes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListResponse, error)
	ConfigLoad(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Configuration, error)
	ConfigValidate(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*ListResponse, error)
	ConfigFinalize(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Configuration, error)
	// Guest capabilities helpers (copied from GuestCapabilities service)
	GuestCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemCapabilityList, error)
	GuestCapability(ctx context.Context, in *GuestCapabilityRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	// Host capabilities helpers (copied from HostCapabilities service)
	HostCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemCapabilityList, error)
	HostCapability(ctx context.Context, in *HostCapabilityRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	// Provider capabilities helpers (copied from ProviderCapabilities service)
	ProviderCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProviderCapabilityList, error)
	ProviderCapability(ctx context.Context, in *ProviderCapabilityRequest, opts ...grpc.CallOption) (*GenericResponse, error)
}

type providerClient struct {
	cc *grpc.ClientConn
}

func NewProviderClient(cc *grpc.ClientConn) ProviderClient {
	return &providerClient{cc}
}

func (c *providerClient) Action(ctx context.Context, in *GenericAction, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/Action", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginInfo, error) {
	out := new(PluginInfo)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) IsInstalled(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*Valid, error) {
	out := new(Valid)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/IsInstalled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) IsUsable(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*Valid, error) {
	out := new(Valid)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/IsUsable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) MachineIdChanged(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*Machine, error) {
	out := new(Machine)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/MachineIdChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) Name(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Identifier, error) {
	out := new(Identifier)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) RunAction(ctx context.Context, in *ExecuteAction, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/RunAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) SshInfo(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*MachineSshInfo, error) {
	out := new(MachineSshInfo)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/SshInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) State(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*MachineState, error) {
	out := new(MachineState)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/State", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) Read(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) Write(ctx context.Context, in *Content, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ConfigAttributes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/ConfigAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ConfigLoad(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Configuration, error) {
	out := new(Configuration)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/ConfigLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ConfigValidate(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/ConfigValidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ConfigFinalize(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Configuration, error) {
	out := new(Configuration)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/ConfigFinalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GuestCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemCapabilityList, error) {
	out := new(SystemCapabilityList)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/GuestCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GuestCapability(ctx context.Context, in *GuestCapabilityRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/GuestCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) HostCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemCapabilityList, error) {
	out := new(SystemCapabilityList)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/HostCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) HostCapability(ctx context.Context, in *HostCapabilityRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/HostCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ProviderCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProviderCapabilityList, error) {
	out := new(ProviderCapabilityList)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/ProviderCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ProviderCapability(ctx context.Context, in *ProviderCapabilityRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/vagrant.proto.Provider/ProviderCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServer is the server API for Provider service.
type ProviderServer interface {
	Action(context.Context, *GenericAction) (*ListResponse, error)
	Info(context.Context, *Empty) (*PluginInfo, error)
	IsInstalled(context.Context, *Machine) (*Valid, error)
	IsUsable(context.Context, *Machine) (*Valid, error)
	MachineIdChanged(context.Context, *Machine) (*Machine, error)
	Name(context.Context, *Empty) (*Identifier, error)
	RunAction(context.Context, *ExecuteAction) (*GenericResponse, error)
	SshInfo(context.Context, *Machine) (*MachineSshInfo, error)
	State(context.Context, *Machine) (*MachineState, error)
	// IO helpers for streaming (copied from Stream service)
	Read(context.Context, *Identifier) (*Content, error)
	Write(context.Context, *Content) (*WriteResponse, error)
	// Config helpers (copied from Config service)
	ConfigAttributes(context.Context, *Empty) (*ListResponse, error)
	ConfigLoad(context.Context, *Configuration) (*Configuration, error)
	ConfigValidate(context.Context, *Configuration) (*ListResponse, error)
	ConfigFinalize(context.Context, *Configuration) (*Configuration, error)
	// Guest capabilities helpers (copied from GuestCapabilities service)
	GuestCapabilities(context.Context, *Empty) (*SystemCapabilityList, error)
	GuestCapability(context.Context, *GuestCapabilityRequest) (*GenericResponse, error)
	// Host capabilities helpers (copied from HostCapabilities service)
	HostCapabilities(context.Context, *Empty) (*SystemCapabilityList, error)
	HostCapability(context.Context, *HostCapabilityRequest) (*GenericResponse, error)
	// Provider capabilities helpers (copied from ProviderCapabilities service)
	ProviderCapabilities(context.Context, *Empty) (*ProviderCapabilityList, error)
	ProviderCapability(context.Context, *ProviderCapabilityRequest) (*GenericResponse, error)
}

func RegisterProviderServer(s *grpc.Server, srv ProviderServer) {
	s.RegisterService(&_Provider_serviceDesc, srv)
}

func _Provider_Action_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Action(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/Action",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Action(ctx, req.(*GenericAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Info(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_IsInstalled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Machine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).IsInstalled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/IsInstalled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).IsInstalled(ctx, req.(*Machine))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_IsUsable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Machine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).IsUsable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/IsUsable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).IsUsable(ctx, req.(*Machine))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_MachineIdChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Machine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).MachineIdChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/MachineIdChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).MachineIdChanged(ctx, req.(*Machine))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Name(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_RunAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).RunAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/RunAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).RunAction(ctx, req.(*ExecuteAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_SshInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Machine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).SshInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/SshInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).SshInfo(ctx, req.(*Machine))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Machine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/State",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).State(ctx, req.(*Machine))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Read(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Content)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Write(ctx, req.(*Content))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ConfigAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ConfigAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/ConfigAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ConfigAttributes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ConfigLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ConfigLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/ConfigLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ConfigLoad(ctx, req.(*Configuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ConfigValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ConfigValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/ConfigValidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ConfigValidate(ctx, req.(*Configuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ConfigFinalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ConfigFinalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/ConfigFinalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ConfigFinalize(ctx, req.(*Configuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GuestCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GuestCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/GuestCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GuestCapabilities(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GuestCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuestCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GuestCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/GuestCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GuestCapability(ctx, req.(*GuestCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_HostCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).HostCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/HostCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).HostCapabilities(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_HostCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).HostCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/HostCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).HostCapability(ctx, req.(*HostCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ProviderCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ProviderCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/ProviderCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ProviderCapabilities(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ProviderCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ProviderCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.proto.Provider/ProviderCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ProviderCapability(ctx, req.(*ProviderCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Provider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vagrant.proto.Provider",
	HandlerType: (*ProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Action",
			Handler:    _Provider_Action_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Provider_Info_Handler,
		},
		{
			MethodName: "IsInstalled",
			Handler:    _Provider_IsInstalled_Handler,
		},
		{
			MethodName: "IsUsable",
			Handler:    _Provider_IsUsable_Handler,
		},
		{
			MethodName: "MachineIdChanged",
			Handler:    _Provider_MachineIdChanged_Handler,
		},
		{
			MethodName: "Name",
			Handler:    _Provider_Name_Handler,
		},
		{
			MethodName: "RunAction",
			Handler:    _Provider_RunAction_Handler,
		},
		{
			MethodName: "SshInfo",
			Handler:    _Provider_SshInfo_Handler,
		},
		{
			MethodName: "State",
			Handler:    _Provider_State_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Provider_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Provider_Write_Handler,
		},
		{
			MethodName: "ConfigAttributes",
			Handler:    _Provider_ConfigAttributes_Handler,
		},
		{
			MethodName: "ConfigLoad",
			Handler:    _Provider_ConfigLoad_Handler,
		},
		{
			MethodName: "ConfigValidate",
			Handler:    _Provider_ConfigValidate_Handler,
		},
		{
			MethodName: "ConfigFinalize",
			Handler:    _Provider_ConfigFinalize_Handler,
		},
		{
			MethodName: "GuestCapabilities",
			Handler:    _Provider_GuestCapabilities_Handler,
		},
		{
			MethodName: "GuestCapability",
			Handler:    _Provider_GuestCapability_Handler,
		},
		{
			MethodName: "HostCapabilities",
			Handler:    _Provider_HostCapabilities_Handler,
		},
		{
			MethodName: "HostCapability",
			Handler:    _Provider_HostCapability_Handler,
		},
		{
			MethodName: "ProviderCapabilities",
			Handler:    _Provider_ProviderCapabilities_Handler,
		},
		{
			MethodName: "ProviderCapability",
			Handler:    _Provider_ProviderCapability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vagrant.proto",
}

func init() { proto.RegisterFile("vagrant.proto", fileDescriptor_05d5fddafc02be38) }

var fileDescriptor_05d5fddafc02be38 = []byte{
	// 1119 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xdf, 0x6e, 0x1b, 0x45,
	0x17, 0x97, 0x1d, 0xff, 0x89, 0x8f, 0x63, 0xc7, 0x1d, 0xf9, 0x8b, 0x5c, 0x37, 0x1f, 0x35, 0xdb,
	0x56, 0xb8, 0x42, 0xca, 0x45, 0xb8, 0x08, 0x88, 0x46, 0x90, 0x3a, 0x6e, 0x6b, 0x9a, 0x96, 0xb0,
	0x11, 0x05, 0x09, 0x41, 0x34, 0xf1, 0x8e, 0xed, 0x11, 0xeb, 0xd9, 0x65, 0x76, 0xd6, 0xc2, 0x5c,
	0x54, 0xbc, 0x02, 0x37, 0x88, 0xa7, 0xe0, 0x86, 0x0b, 0x9e, 0x80, 0x27, 0xe2, 0x05, 0xd0, 0xce,
	0xce, 0x3a, 0xbb, 0xeb, 0x5d, 0xdb, 0xb8, 0x45, 0x69, 0xa4, 0xde, 0xcd, 0x39, 0x33, 0xbf, 0x33,
	0xe7, 0x9c, 0x39, 0xf3, 0x3b, 0x33, 0x50, 0x99, 0xe0, 0x21, 0xc7, 0x4c, 0xec, 0xd9, 0xdc, 0x12,
	0x16, 0x8a, 0x8a, 0x5a, 0x11, 0xf2, 0xdd, 0xb1, 0x2d, 0xa6, 0xda, 0x1d, 0x28, 0x3e, 0xc3, 0xfd,
	0x11, 0x65, 0x04, 0x35, 0xa0, 0x38, 0xf6, 0x87, 0x8d, 0x4c, 0x2b, 0xd3, 0x2e, 0xe9, 0x81, 0xa8,
	0xdd, 0x86, 0xfc, 0x0b, 0x6c, 0x52, 0x03, 0xed, 0x40, 0x81, 0x13, 0xc7, 0x35, 0x85, 0x5c, 0xb1,
	0xa9, 0x2b, 0x49, 0x6b, 0x01, 0xf4, 0x0c, 0xc2, 0x04, 0x1d, 0x50, 0xc2, 0x11, 0x82, 0x1c, 0xc3,
	0xe3, 0xc0, 0x8a, 0x1c, 0x6b, 0x9f, 0x01, 0x9c, 0x9a, 0xee, 0x90, 0xb2, 0x1e, 0x1b, 0x58, 0xa8,
	0x05, 0x65, 0x83, 0x38, 0x7d, 0x4e, 0x6d, 0x41, 0x2d, 0xa6, 0x16, 0x86, 0x55, 0xa8, 0x09, 0x9b,
	0x36, 0xa7, 0x16, 0xa7, 0x62, 0xda, 0xc8, 0xb6, 0x32, 0xed, 0x0d, 0x7d, 0x26, 0x6b, 0x07, 0x50,
	0xec, 0x58, 0x4c, 0x10, 0x26, 0x3c, 0x87, 0x04, 0xe6, 0x43, 0x22, 0x94, 0x0d, 0x25, 0xa1, 0x3a,
	0xe4, 0x27, 0xd8, 0x74, 0x89, 0xc4, 0x96, 0x74, 0x5f, 0xd0, 0xde, 0x83, 0xca, 0x57, 0x9c, 0x0a,
	0xa2, 0x13, 0xc7, 0xb6, 0x98, 0x43, 0x3c, 0xb8, 0x49, 0xd8, 0x50, 0x8c, 0x24, 0x3c, 0xaf, 0x2b,
	0x49, 0x7b, 0x08, 0xb5, 0xb3, 0xa9, 0x23, 0xc8, 0xb8, 0x83, 0x6d, 0x7c, 0x41, 0x4d, 0x2a, 0xa6,
	0x49, 0x51, 0x49, 0x2f, 0x4d, 0x2c, 0x06, 0x16, 0x1f, 0xab, 0x9d, 0x66, 0xb2, 0x76, 0x0c, 0xe8,
	0x94, 0x5b, 0x13, 0x6a, 0x10, 0xbe, 0x82, 0x15, 0xb5, 0x72, 0x66, 0x45, 0xc9, 0xda, 0x37, 0x50,
	0x8f, 0x7b, 0x72, 0x42, 0x1d, 0x81, 0x3a, 0xb0, 0xd5, 0x0f, 0x34, 0x94, 0x38, 0x8d, 0x4c, 0x6b,
	0xa3, 0x5d, 0xde, 0xbf, 0xbd, 0x17, 0x39, 0xe6, 0xbd, 0x38, 0x54, 0x8f, 0x80, 0xb4, 0x73, 0xd8,
	0x99, 0x77, 0x51, 0x9a, 0xef, 0x26, 0x9a, 0x7f, 0x37, 0x66, 0x7e, 0x1e, 0x1c, 0xdb, 0xe0, 0x3e,
	0x6c, 0x3f, 0x26, 0x8c, 0x70, 0xda, 0x0f, 0xa7, 0x3c, 0x54, 0x42, 0xa5, 0x59, 0x09, 0xfd, 0x92,
	0x81, 0x9d, 0xc7, 0x2e, 0x71, 0x44, 0xc8, 0x18, 0xf9, 0xc1, 0x53, 0xa0, 0x4f, 0x00, 0x66, 0x56,
	0xa7, 0x12, 0xb6, 0x42, 0xa4, 0x21, 0x48, 0xb8, 0xb2, 0xb3, 0x91, 0xca, 0x46, 0xbb, 0x50, 0xc2,
	0x7c, 0xe8, 0x8e, 0x09, 0x13, 0x4e, 0x63, 0x43, 0xce, 0x5d, 0x2a, 0xb4, 0xdf, 0x32, 0xf0, 0xbf,
	0x27, 0xd6, 0x7f, 0xe2, 0x52, 0x0b, 0xca, 0x84, 0x4d, 0x28, 0xb7, 0x98, 0xb7, 0x95, 0x72, 0x2b,
	0xac, 0x5a, 0xe2, 0xda, 0xaf, 0x19, 0xb8, 0x99, 0x90, 0x7e, 0xe5, 0xde, 0x51, 0x82, 0x7b, 0x2b,
	0x1c, 0xde, 0xeb, 0xc8, 0xd9, 0x21, 0x54, 0x3a, 0x16, 0x1b, 0xd0, 0xa1, 0xcb, 0xb1, 0xbc, 0xc9,
	0x08, 0x72, 0x06, 0x16, 0x38, 0xa8, 0x78, 0x6f, 0x9c, 0x6e, 0x5c, 0xbb, 0x0b, 0x5b, 0x5e, 0x01,
	0xce, 0xca, 0xa5, 0x0e, 0x79, 0x2a, 0xc8, 0xd8, 0xaf, 0xc0, 0x92, 0xee, 0x0b, 0xda, 0xb7, 0x50,
	0x39, 0x9b, 0xb2, 0x3e, 0x31, 0x1e, 0x59, 0xa6, 0x41, 0xb8, 0x93, 0xce, 0x5d, 0xde, 0xcc, 0xc0,
	0x5f, 0x14, 0x6c, 0x35, 0xb8, 0xc4, 0x58, 0x92, 0x6c, 0x82, 0x28, 0x02, 0xd1, 0x8b, 0x41, 0x95,
	0xed, 0x51, 0x3f, 0x88, 0x61, 0xee, 0xd6, 0xa6, 0xc7, 0xf0, 0x05, 0x54, 0xba, 0x3f, 0x92, 0xbe,
	0x2b, 0xc8, 0x02, 0x78, 0x90, 0x96, 0x6c, 0x72, 0x5a, 0x36, 0xa2, 0x26, 0x5f, 0x42, 0x55, 0xd1,
	0xf4, 0x99, 0x33, 0x92, 0x14, 0x8a, 0x20, 0x37, 0xb2, 0x9c, 0xe0, 0x16, 0xc9, 0xb1, 0xa7, 0xb3,
	0x2d, 0x2e, 0x14, 0x61, 0xca, 0x31, 0x6a, 0x43, 0xcd, 0xe6, 0x74, 0x82, 0x05, 0x39, 0xff, 0x9e,
	0x4c, 0xcf, 0x6d, 0x2c, 0x46, 0xca, 0x78, 0x55, 0xe9, 0x9f, 0x92, 0xe9, 0x29, 0x16, 0x23, 0x8f,
	0x86, 0x5c, 0x87, 0x70, 0xe9, 0x69, 0xce, 0xa7, 0xa1, 0x40, 0xd6, 0x26, 0xb0, 0x15, 0xec, 0x2f,
	0xb0, 0x20, 0xa8, 0x0a, 0x59, 0x6a, 0xa8, 0xbd, 0xb3, 0xd4, 0x40, 0xef, 0xc3, 0x0d, 0x67, 0x64,
	0x71, 0x71, 0x1e, 0xa6, 0x75, 0x3f, 0xb4, 0x9a, 0x9c, 0x38, 0x0e, 0x71, 0xfb, 0x7d, 0xa8, 0x99,
	0x16, 0x1b, 0x46, 0xd6, 0xfa, 0x2e, 0x6d, 0x7b, 0xfa, 0xd0, 0xd2, 0xfd, 0x97, 0x90, 0xed, 0x7d,
	0x8e, 0x3e, 0x82, 0x9c, 0x4e, 0xb0, 0x81, 0x6e, 0xc6, 0x4a, 0xf8, 0xb2, 0xe7, 0x34, 0x77, 0x62,
	0x53, 0x41, 0x83, 0x38, 0x84, 0xbc, 0xa4, 0x7c, 0x94, 0xb2, 0xa0, 0xb9, 0x1b, 0xd3, 0x47, 0x1a,
	0xc4, 0xfe, 0x9f, 0x59, 0xb8, 0x11, 0x65, 0x25, 0x4a, 0x1c, 0xf4, 0x3c, 0x49, 0x59, 0x8f, 0x19,
	0x92, 0xfd, 0xb5, 0x79, 0x67, 0x09, 0x29, 0x48, 0xb6, 0xfd, 0x1a, 0xb6, 0x63, 0xd4, 0x87, 0xee,
	0xc5, 0x70, 0xc9, 0xd4, 0xd8, 0x7c, 0x27, 0xbe, 0x2c, 0xc6, 0xb6, 0x57, 0x97, 0xb9, 0x3f, 0xb2,
	0x50, 0x8b, 0x70, 0xa7, 0x97, 0xa3, 0x67, 0x09, 0xba, 0x57, 0xc8, 0xdb, 0x0b, 0xa8, 0x46, 0xe9,
	0x19, 0xdd, 0x8d, 0xc1, 0x12, 0xd9, 0xfb, 0x0d, 0xce, 0xda, 0x5f, 0x59, 0xa8, 0xcf, 0x11, 0xb3,
	0x97, 0xa5, 0xb3, 0x14, 0x7d, 0x72, 0xf6, 0xee, 0x2d, 0xe5, 0x7a, 0x99, 0xbf, 0xef, 0x12, 0x9f,
	0x28, 0xed, 0xe5, 0x8d, 0xe2, 0x8d, 0xcf, 0xe3, 0xef, 0x1b, 0x50, 0xf0, 0xdb, 0x10, 0xea, 0x42,
	0xcd, 0x1f, 0x1d, 0x09, 0xc1, 0xe9, 0x85, 0x2b, 0x52, 0xb3, 0x76, 0x2b, 0xa6, 0x8d, 0x34, 0xa2,
	0x27, 0x00, 0xbe, 0x99, 0x13, 0x0b, 0x1b, 0x68, 0x77, 0xde, 0xab, 0xcb, 0x96, 0xd7, 0x5c, 0x38,
	0x8b, 0x9e, 0x42, 0xd5, 0x57, 0xc8, 0x37, 0xb5, 0xc7, 0xa6, 0x8b, 0xad, 0x2d, 0x74, 0xeb, 0x24,
	0x30, 0xf6, 0x88, 0x32, 0x6c, 0xd2, 0x9f, 0xc8, 0x2b, 0xb9, 0x76, 0x75, 0x07, 0xf6, 0x73, 0x11,
	0xb6, 0xc2, 0x2d, 0x1d, 0x1d, 0x42, 0xb1, 0x63, 0x12, 0xcc, 0x5c, 0x7b, 0x2e, 0xa2, 0x48, 0xeb,
	0x6f, 0x26, 0x9e, 0xa5, 0x07, 0x3f, 0xa6, 0x0e, 0xbe, 0x30, 0xc9, 0x5a, 0xf0, 0x07, 0x50, 0xe8,
	0xb2, 0xb5, 0xd1, 0x07, 0x90, 0x93, 0x3d, 0x3a, 0xb9, 0xcc, 0xe2, 0xc9, 0x0d, 0xfd, 0x8b, 0x3e,
	0x84, 0xcd, 0x9e, 0xf3, 0xa5, 0xef, 0x76, 0x3c, 0x8f, 0xaa, 0xff, 0xce, 0x6d, 0xe9, 0xff, 0xcc,
	0x0e, 0x20, 0xf7, 0xdc, 0x7b, 0x56, 0xac, 0xb6, 0x65, 0xe8, 0xb3, 0x76, 0x08, 0xc5, 0x53, 0x4e,
	0x6c, 0xcc, 0xd7, 0x0b, 0xf5, 0xca, 0x2a, 0xe6, 0x1a, 0x35, 0xe1, 0xeb, 0xd1, 0xf5, 0xf6, 0xff,
	0x2e, 0xc3, 0x66, 0xc0, 0xf5, 0xa8, 0x03, 0x05, 0xf5, 0x78, 0xdd, 0x4d, 0x86, 0xf9, 0xb3, 0x8b,
	0xc9, 0x69, 0xed, 0x7b, 0xf0, 0x31, 0x94, 0x7b, 0x4e, 0x8f, 0x39, 0x02, 0x9b, 0x26, 0x31, 0xfe,
	0xe5, 0x55, 0x58, 0xff, 0x12, 0x3d, 0x84, 0x9a, 0x5a, 0xd0, 0x33, 0x3a, 0x23, 0xcc, 0x86, 0x0b,
	0xf6, 0x4e, 0xd1, 0xaf, 0x7f, 0x11, 0x7b, 0x50, 0xd2, 0x5d, 0x96, 0x92, 0xf4, 0xc8, 0x7f, 0x62,
	0x69, 0xc1, 0x7d, 0x0a, 0xc5, 0xe0, 0x9b, 0x90, 0xe6, 0xfe, 0xff, 0x93, 0xf5, 0x01, 0xec, 0x01,
	0xe4, 0xfd, 0x87, 0x7e, 0x1a, 0xfe, 0x56, 0x0a, 0x5e, 0x82, 0xae, 0x8e, 0x14, 0xde, 0x36, 0xfb,
	0xd5, 0x5d, 0x7b, 0x4b, 0xa0, 0xaf, 0xf9, 0xdb, 0x70, 0x1d, 0xdf, 0xe8, 0x17, 0x05, 0xa9, 0xfe,
	0xe0, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x65, 0xa8, 0x70, 0xea, 0x30, 0x16, 0x00, 0x00,
}
