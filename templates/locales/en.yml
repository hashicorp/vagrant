en:
  vagrant:
    general:
      creating_home_dir: "Creating home directory since it doesn't exist: %{directory}"
      moving_home_dir: "Moving old Vagrant home directory to new location: %{directory}"
      home_dir_migration_failed: |-
        Both an old and new Vagrant home directory exist. Only the new one will
        be used. Please merge the old directory into the new directory if you'd
        like to use the old data as well.

        Old: %{old}
        New: %{new}

#-------------------------------------------------------------------------------
# Translations for exception classes
#-------------------------------------------------------------------------------
    errors:
      base_vm_not_found: The base VM with the name '%{name}' was not found.
      box_not_found: Box '%{name}' could not be found.
      chef_not_detected: |-
        The chef (either `chef-solo` or `chef-client`) binary was not found on
        the VM and is required for chef provisioning. Please verify that chef
        is installed and that the binary is available on the PATH.
      puppet_not_detected: |-
        The `puppet` binary was not found on the VM and is required for Puppet provisioning.
        Please verify that Puppet is installed and that the binary is available on the PATH.
      puppetd_not_detected: |-
        The `puppetd` binary was not found on the VM is required for Puppet Server provisioning.
        Please verify that Puppet is installed and that the binary is available on the PATH.
      cli_missing_env: This command requires that a Vagrant environment be properly passed in as the last parameter.
      config_validation: |-
        There was a problem with the configuration of Vagrant. The error message(s)
        are printed below:

        %{messages}
      dotfile_is_directory: |-
        The local file Vagrant uses to store data ".vagrant" already exists
        and is a directory! If you are in your home directory, then please run
        this command in another directory. If you aren't in a home directory,
        then please rename ".vagrant" to something else, or configure Vagrant
        to use another filename by modifying `config.vagrant.dotfile_name`.
      environment_locked: |-
        An instance of Vagrant is already running. Only one instance of Vagrant
        may run at any given time to avoid problems with VirtualBox inconsistencies
        occurring. Please wait for the other instance of Vagrant to end and then
        try again.
      interrupted: "Vagrant exited after cleanup due to external interrupt."
      multi_vm_required: "A multi-vm environment is required for name specification to this command."
      multi_vm_target_required: "`vagrant %{command}` requires a specific VM name to target in a multi-VM environment."
      no_env: "No Vagrant environment detected. Run `vagrant init` to set one up."
      ssh_authentication_failed: |-
        SSH authentication failed! This is typically caused by the public/private
        keypair for the SSH user not being properly set on the guest VM. Please
        verify that the guest VM is setup with the proper public key, and that
        the private key path for Vagrant is setup properly as well.
      ssh_bad_exit_status: |-
        The following SSH command responded with a non-zero exit status.
        Vagrant assumes that this means the command failed!

        %{command}

        The output of the command prior to failing is outputted below:

        %{output}
      ssh_connection_refused: |-
        SSH connection was refused! This usually happens if the VM failed to
        boot properly. Some steps to try to fix this: First, try reloading your
        VM with `vagrant reload`, since a simple restart sometimes fixes things.
        If that doesn't work, destroy your VM and recreate it with a `vagrant destroy`
        followed by a `vagrant up`. If that doesn't work, contact a Vagrant
        maintainer (support channels listed on the website) for more assistance.
      ssh_key_bad_permissions: |-
        The private key to connect to this box via SSH has invalid permissions
        set on it. The permissions of the private key should be set to 0600, otherwise SSH will
        ignore the key. Vagrant tried to do this automatically for you but failed. Please set the
        permissions on the following file to 0600 and then try running this command again:

        %{key_path}
      ssh_port_not_detected: |-
        Vagrant couldn't determine the SSH port for your VM! This is a rare,
        exceptional event, and a bug should be filed. Please try recreating your
        VM (vagrant destroy, then vagrant up). Sorry!
      ssh_unavailable: "`ssh` binary could not be found. Is an SSH client installed?"
      ssh_unavailable_windows: |-
        `vagrant ssh` isn't available on the Windows platform. The
        vagrant.ppk file for use with Putty is available at:

          %{key_path}.ppk

        To use this create a new Putty session for `vagrant@localhost`
        on port `%{ssh_port}`, in the Connection>SSH>Auth
        configuration section navigate to the vagrant.ppk file,
        select it, save the session for later use, and connect.

        For a more detailed guide please consult:

          http://vagrantup.com/docs/getting-started/setup/windows.html

      system:
        invalid_class: |-
          The specified system does not inherit from `Vagrant::Systems::Base`. The
          specified system class must inherit from this class.

          The specified system class was: %{system}
        unknown_type: |-
          The specified system type is unknown: %{system}. Please change this
          to a proper value.
        unspecified: |-
          A VM system type must be specified! This is done via the `config.vm.system`
          configuration value. Please read the documentation online for more information.
      vagrantfile_syntax_error: |-
        There is a syntax error in the following Vagrantfile. The syntax error
        message is reproduced below for convenience:

        %{file}
      virtualbox_invalid_version: |-
        Vagrant has detected that you have VirtualBox version %{version} installed!
        Vagrant requires that you use at least VirtualBox version 4.1. Please install
        a more recent version of VirtualBox to continue.

        Early versions of Vagrant support earlier versions of VirtualBox. Specifically,
        the 0.7.x series supports VirtualBox 4.0.x and the 0.6.x series supports VirtualBox
        3.2.x. Please use the version you need.

        Any newer versions may not be supported yet. Please check the mailing list
        for any announcements of newer versions.
      virtualbox_not_detected: |-
        Vagrant could not detect VirtualBox! Make sure VirtualBox is properly installed.
        If VirtualBox is installed, it may be an incorrect version. Vagrant currently
        requires VirtualBox 4.1.x. Please install the proper version to continue.

        If you have an older or newer version of VirtualBox, please make sure you're
        using the proper version of Vagrant. Ask the mailing list if you have questions.
      virtualbox_not_detected_win64: |-
        Vagrant could not detect VirtualBox! Make sure VirtualBox is properly installed
        with version 4.0.0 or higher.

        Additionally, it appears you're on 64-bit Windows. If this is the case, and
        VirtualBox is properly installed with the correct version, then please make
        sure you're running Vagrant via JRuby on a 64-bit Java runtime. For more
        information on how to set this up and how to verify it is properly setup,
        please view the guide online at:

          http://vagrantup.com/docs/getting-started/setup/windows_x64.html

      vm_creation_required: "VM must be created before running this command. Run `vagrant up` first."
      vm_not_found: "A VM by the name of %{name} was not found."
      vm_not_running: "VM must be running to open SSH connection."

#-------------------------------------------------------------------------------
# Translations for config validation errors
#-------------------------------------------------------------------------------
    config:
      common:
        error_empty: "`%{field}` must be filled in."
      chef:
        run_list_empty: "Run list must not be empty."
        cookbooks_path_empty: "Must specify a cookbooks path for chef solo."
        server_url_empty: "Chef server URL must be populated."
        validation_key_path: "Validation key path must be valid path to your chef server validation key."
      ssh:
        private_key_missing: "`private_key_path` file must exist: %{path}"
      vm:
        base_mac_invalid: "Base MAC address for eth0/NAT must be set. Contact box maintainer for more information."
        boot_mode_invalid: "Boot mode must be one of: vrdp or gui"
        box_missing: "A box must be specified."
        box_not_found: "The box '%{name}' could not be found."
        network_ip_invalid: "The host only network IP '%{ip}' is invalid."
        network_ip_ends_one: |-
          The host only network IP '%{ip}' must not end in a 1, as this
          is reserved for the host machine.
        shared_folder_hostpath_missing: "Shared folder host path for '%{name}' doesn't exist: %{path}"
        shared_folder_nfs_owner_group: |-
          Shared folder '%{name}': NFS does not support the owner/group settings.
        provisioner_chef_server_changed: "The provisioner 'chef_server' is now 'chef_client'"
        provisioner_not_found: "The provisioner '%{shortcut}' doesn't exist."
        provisioner_invalid_class: "The provisioner '%{shortcut}' must inherit from `Vagrant::Provisioners::Base`."

#-------------------------------------------------------------------------------
# Translations for commands. e.g. `vagrant x`
#-------------------------------------------------------------------------------
    commands:
      common:
        vm_not_created: "VM not created. Moving on..."
        vm_not_running: "VM is not currently running. Please bring it up to run this command."
      box:
        no_installed_boxes: "There are no installed boxes! Use `vagrant box add` to add some."
      ssh:
        command: "Command: %{command}"
      status:
        aborted: |-
          The VM is in an aborted state. This means that it was abruptly
          stopped without properly closing the session. Run `vagrant up`
          to resume this virtual machine. If any problems persist, you may
          have to destroy and restart the virtual machine.
        output: |-
          Current VM states:

          %{states}

          %{message}
        not_created: |-
          The environment has not yet been created. Run `vagrant up` to
          create the environment.
        powered_off: The VM is powered off. To restart the VM, simply run `vagrant up`
        running: |-
          The VM is running. To stop this VM, you can run `vagrant halt` to
          shut it down forcefully, or you can run `vagrant suspend` to simply
          suspend the virtual machine. In either case, to restart it again,
          simply run `vagrant up`.
        saved: To resume this VM, simply run `vagrant up`.
        stuck: |-
          The VM is "stuck!" This is a very rare state which means that
          VirtualBox is unable to recover the current state of the VM.
          The only known solution to this problem is to restart your
          machine, sorry.
        listing: |-
          This environment represents multiple VMs. The VMs are all listed
          above with their current state. For more information about a specific
          VM, run `vagrant status NAME`.
      up:
        vm_created: "VM already created. Booting if its not already running..."
      upgrade_to_060:
        already_done: "Environment appears to already be upgraded to 0.6.0. Doing nothing!"
        ask: "Are you sure you want to execute this command?"
        backing_up: "Backing up previous .vagrant file..."
        complete: "Environment upgraded to 0.6.0 successfully."
        info: |-
          This command will upgrade the current environment from a pre-0.6.0
          environment to a 0.6.x compatible environment. Running this command
          multiple times should be okay. This command will make a backup file
          prior to making any changes. Therefore, if anything goes wrong, then
          restore that file to ".vagrant" in the same directory as the Vagrantfile.
        quit: "Not executing this command by user request. Quitting..."
      version:
        output: "Vagrant version %{version}"

#-------------------------------------------------------------------------------
# Translations for Vagrant middleware acions
#-------------------------------------------------------------------------------
    actions:
      runner:
        waiting_cleanup: "Waiting for cleanup before exiting..."
        exit_immediately: "Exiting immediately, without cleanup!"
      vm:
        boot:
          booting: Booting VM...
          waiting: Waiting for VM to boot. This can take a few minutes.
          ready: VM booted and ready for use!
          failed: Failed to connect to VM!
          failed_to_boot: |-
            Failed to connect to VM via SSH. Please verify the VM successfully booted
            by looking at the VirtualBox GUI.
        check_box:
          not_found: Box %{name} was not found. Fetching box from specified URL...
          not_specified: |-
            No base box was specified! A base box is required as a staring point
            for every vagrant virtual machine. Please specify one in your Vagrantfile
            using `config.vm.box`
          does_not_exist: |-
            Specified box `%{name}` does not exist!

            The box must be added through the `vagrant box add` command. Please view
            the documentation associated with the command for more information.
        check_guest_additions:
          not_detected: |-
            No guest additions were detected on the base box for this VM! Guest
            additions are required for forwarded ports, shared folders, host only
            networking, and more. If SSH fails on this machine, please install
            the guest additions and repackage the box to continue.

            This is not an error message; everything may continue to work properly,
            in which case you may ignore this message.
          version_mismatch: |-
            The guest additions on this VM do not match the install version of
            VirtualBox! This may cause things such as forwarded ports, shared
            folders, and more to not work properly. If any of those things fail on
            this machine, please update the guest additions and repackage the
            box.

            Guest Additions Version: %{guest_version}
            VirtualBox Version: %{virtualbox_version}
        clear_forward_ports:
          deleting: Clearing any previously set forwarded ports...
        clear_shared_folders:
          deleting: Cleaning previously set shared folders...
        customize:
          running: Running any VM customizations...
        destroy:
          destroying: Destroying VM and associated drives...
        destroy_network:
          destroying: Destroying unused networking interface...
        disable_networks:
          disabling: Disabling host only networks...
        discard_state:
          discarding: Discarding saved state of VM...
        export:
          create_dir: Creating temporary directory for export...
          exporting: Exporting VM...
          power_off: "The Vagrant virtual environment you are trying to package must be powered off."
        forward_ports:
          auto_empty: |-
            Vagrant found a port collision for the specified port and virtual machine.
            While this port was marked to be auto-corrected, the ports in the
            auto-correction range are all also used.

            VM: %{vm_name}
            Forwarded port: %{name} (%{guest_port} => %{host_port})
          below_threshold_error: |-
            The host port of all forwarded ports must be above 1024. VirtualBox
            does not allow host ports to be below 1024. (Guest ports below 1024
            are fine. For example: SSH on port 22 on the guest can be forwarded
            to port 2222, but not 222).
          collision_error: |-
            Vagrant cannot forward the specified ports on this VM, since they
            would collide with another VirtualBox virtual machine's forwarded
            ports! The '%{name}' forwarded port (%{host_port}) is already in use on the host
            machine.

            To fix this, modify your current projects Vagrantfile to use another
            port. Example, where '1234' would be replaced by a unique host port:

              config.vm.forward_port("%{name}", %{guest_port}, 1234)

          fixed_collision: Fixed port collision '%{name}'. Now on port %{new_port}.
          forwarding: Forwarding ports...
          forwarding_entry: "-- %{name}: %{guest_port} => %{host_port} (adapter %{adapter})"
          non_nat: |-
            VirtualBox adapter #%{adapter} not configured as "NAT"
            Skipping port forwarding '%{name}'.
        halt:
          force: Forcing shutdown of VM...
        host_name:
          setting: "Setting host name..."
        import:
          importing: Importing base box '%{name}'...
          failure: |-
            The VM import failed! Try running `VBoxManage import` on the box file
            manually for more verbose error output.
        match_mac:
          matching: Matching MAC address for NAT networking...
          no_base_mac: |-
            No base MAC address was specified. This is required for the NAT networking
            to work properly (and hence port forwarding, SSH, etc.). Specifying this
            MAC address is typically up to the box and box maintiner. Please contact
            the relevant person to solve this issue.
        network:
          collides: |-
            The specified host network collides with a non-hostonly network!
            This will cause your specified IP to be inaccessible. Please change
            the IP or name of your host only network to not match that of
            a bridged or non-hostonly network.
          creating: "Creating new host only network for environment..."
          enabling: "Enabling host only network..."
          not_found: |-
            The specified host network could not be found: '%{name}.'
            If the name specification is removed, Vagrant will create a new
            host only network for you. Alternatively, please create the
            specified network manually.
          preparing: "Preparing host only network..."
          windows_not_implemented: |-
            Host only networking is currently broken on Windows due to a bug
            in jruby-win32ole. When the bug is fixed, a patch release for Vagrant
            will be released to remove this error. Until then, please just use
            forwarded ports.
        nfs:
          host_required: |-
            A host class is required for NFS shared folders. By default, these
            are auto-detected, but can be overridden with `config.vagrant.host`.
            There is currently not host class loaded.
          no_host_network: |-
            NFS shared folders requires that host only networking is enabled.
            Please enable host only networking via `config.vm.network`.
          not_supported: |-
            The host class is reporting that NFS is not supported by this host,
            or `nfsd` may not be installed. Please verify that `nfsd` is installed
            on your machine, and retry.
          exporting: Exporting NFS shared folders...
          mounting: Mounting NFS shared folders...
        persist:
          dotfile_error: |-
            The dotfile which Vagrant uses to store the UUID of the project's
            virtual machine already exists and is not a file! The dotfile is
            currently configured to be '%{dotfile_path}'

            To change this value, please see `config.vagrant.dotfile_name`

            Are you trying to use Vagrant from your home directory? This is the
            leading cause of this error message. To resolve this, simply use a
            different directory. Or, if you really want to run Vagrant from your
            home directory, modify the `config.vagrant.dotfile_name` configuration
            key.
          persisting: "Persisting the VM UUID (%{uuid})..."
        provision:
          beginning: "Running provisioner: %{provisioner}..."
        resume:
          resuming: Resuming suspended VM...
        share_folders:
          creating: Creating shared folders metadata...
          mounting: Mounting shared folders...
          mounting_entry: "-- %{name}: %{guest_path}"
          nomount_entry: "-- %{name}: Automounting disabled."
        suspend:
          suspending: Saving VM state and suspending execution...

      box:
        destroy:
          destroying: "Deleting box '%{name}'..."
        download:
          with: "Downloading with %{class}..."
          cleaning: "Cleaning up downloaded box..."
          unknown_type: "Unknown or unsupported URI type given for box download."
        unpackage:
          extracting: "Extracting box..."
          already_exists: |-
            A box already exists under the name of '%{name}'. This may or may
            not be the same box you are trying to add. Please use another name
            or remove the previous box then try to add it again.
        verify:
          verifying: "Verifying box..."
          failed: |-
            The box file you're attempting to add is invalid. This can be
            commonly attributed to typos in the path given to the box add
            command. Another common case of this is invalid packaging of the
            box itself.

      general:
        package:
          packaging: "Packaging additional file: %{file}"
          compressing: "Compressing package to: %{tar_path}"
          output_exists: |-
            The specified file to save the package as already exists. Please
            remove this file or specify a different file name for outputting.
          requires_directory: |-
            A directory was not specified to package. This should never happen
            and is a result of an internal inconsistency.
          include_file_missing: |-
            Package include file doesn't exist: %{file}

    downloaders:
      file:
        download: "Copying box to temporary location..."
        file_missing: "The specified path to a file doesn't exist."
      http:
        download: "Downloading box: %{url}"
        socket_error: |-
          An error occurred while trying to download the specified box. This most
          often happens if there is no internet connection or the address is
          invalid.
        status_error: |-
          Bad status code: %{status}

          Please verify that the box exists and is accessible. Also verify that
          this computer is properly connected to the internet.

    hosts:
      bsd:
        nfs_export:
          prepare: "Preparing to edit /etc/exports. Administrator privileges will be required..."
      linux:
        nfs_export:
          prepare: "Preparing to edit /etc/exports. Administrator privileges will be required..."

      arch:
        nfs_export:
          prepare: "Preparing to edit /etc/exports. Administrator privileges will be required..."

    provisioners:
      chef:
        json: "Generating chef JSON and uploading..."
        client_key_folder: "Creating folder to hold client key..."
        upload_validation_key: "Uploading chef client validation key..."
        upload_encrypted_data_bag_secret_key: "Uploading chef encrypted data bag secret key..."
        running_client: "Running chef-client..."
        running_solo: "Running chef-solo..."
        invalid_provisioner: "Vagrant::Provisioners::Chef is not a valid provisioner! Use ChefSolo or ChefClient instead."
        not_detected: |-
          The `%{binary}` binary appears to not be in the PATH of the guest. This
          could be because the PATH is not properly setup or perhaps chef is not
          installed on this guest. Chef provisioning can not continue without
          chef properly installed.
        server_url_required: |-
          Chef server provisioning requires that the `config.chef.chef_server_url` be set to the
          URL of your chef server. Examples include "http://12.12.12.12:4000" and
          "http://myserver.com:4000" (the port of course can be different, but 4000 is the default)
        server_validation_key_required: |-
          Chef server provisioning requires that the `config.chef.validation_key_path` configuration
          be set to a path on your local machine of the validation key used to register the
          VM with the chef server.
        server_validation_key_doesnt_exist: |-
          The validation key set for `config.chef.validation_key_path` does not exist! This
          file needs to exist so it can be uploaded to the virtual machine.

      puppet:
        not_detected: |-
          The `%{binary}` binary appears to not be in the PATH of the guest. This
          could be because the PATH is not properly setup or perhaps Puppet is not
          installed on this guest. Puppet provisioning can not continue without
          Puppet properly installed.
        running_puppet: "Running Puppet with %{manifest}..."
        manifest_missing: "The Puppet %{manifest} manifest is missing. You cannot configure this box."
        manifests_path_missing: "The manifests path specified for Puppet does not exist: %{path}"
        module_path_missing: "The configured module path doesn't exist: %{path}"

      puppet_server:
        not_detected: |-
          The `%{binary}` binary appears to not be in the PATH of the guest. This
          could be because the PATH is not properly setup or perhaps Puppet is not
          installed on this guest. Puppet provisioning can not continue without
          Puppet properly installed.
        running_puppetd: "Running Puppet agent..."

      shell:
        path_and_inline_set: "Only one of `path` or `inline` may be set."
        no_path_or_inline: "One of `path` or `inline` must be set."
        path_invalid: "`path` for shell provisioner does not exist on the host system: %{path}"
        upload_path_not_set: "`upload_path` must be set for the shell provisioner."

    systems:
      base:
        unsupported_host_only: |-
          Host only networking is very distro-specific. Vagrant has support for many
          distros built-in: Debian, Ubuntu, Gentoo, and RedHat. The distro of your VM
          couldn't be detected, or isn't supported for host only networking.

          Most of the time this is simply due to the fact that no one has contributed
          back the SSH commands necessary to set this up. Please report a bug and this
          will be fixed for your distro.
        unsupported_host_name: |-
          Setting host name is currently only supported on Debian, Ubuntu and RedHat.
          If you'd like your guest OS to be supported, please open a ticket on the
          project.
      linux:
        attempting_halt: "Attempting graceful shutdown of linux..."
        mount_fail: "Failed to mount shared folders. `vboxsf` was not available."
        mount_nfs_fail: |-
          Mounting NFS shared folders failed. This is most often caused by the NFS
          client software not being installed on the guest machine. Please verify
          that the NFS client software is properly installed, and consult any resources
          specific to the linux distro you're using for more information on how to
          do this.

      solaris:
        attempting_halt: "Attempting graceful shutdown of solaris..."

      freebsd:
        attempting_halt: "Attempting graceful shutdown of FreeBSD..."
